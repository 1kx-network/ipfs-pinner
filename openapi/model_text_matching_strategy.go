/*
IPFS Pinning Service API

some notes

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TextMatchingStrategy Alternative text matching strategy
type TextMatchingStrategy string

// List of TextMatchingStrategy
const (
	EXACT    TextMatchingStrategy = "exact"
	IEXACT   TextMatchingStrategy = "iexact"
	PARTIAL  TextMatchingStrategy = "partial"
	IPARTIAL TextMatchingStrategy = "ipartial"
)

// All allowed values of TextMatchingStrategy enum
var AllowedTextMatchingStrategyEnumValues = []TextMatchingStrategy{
	"exact",
	"iexact",
	"partial",
	"ipartial",
}

func (v *TextMatchingStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TextMatchingStrategy(value)
	for _, existing := range AllowedTextMatchingStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TextMatchingStrategy", value)
}

// NewTextMatchingStrategyFromValue returns a pointer to a valid TextMatchingStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTextMatchingStrategyFromValue(v string) (*TextMatchingStrategy, error) {
	ev := TextMatchingStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TextMatchingStrategy: valid values are %v", v, AllowedTextMatchingStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TextMatchingStrategy) IsValid() bool {
	for _, existing := range AllowedTextMatchingStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TextMatchingStrategy value
func (v TextMatchingStrategy) Ptr() *TextMatchingStrategy {
	return &v
}

type NullableTextMatchingStrategy struct {
	value *TextMatchingStrategy
	isSet bool
}

func (v NullableTextMatchingStrategy) Get() *TextMatchingStrategy {
	return v.value
}

func (v *NullableTextMatchingStrategy) Set(val *TextMatchingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableTextMatchingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableTextMatchingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextMatchingStrategy(val *TextMatchingStrategy) *NullableTextMatchingStrategy {
	return &NullableTextMatchingStrategy{value: val, isSet: true}
}

func (v NullableTextMatchingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextMatchingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
