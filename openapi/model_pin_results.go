/*
IPFS Pinning Service API

some notes

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PinResults Response used for listing pin objects matching request
type PinResults struct {
	// The total number of pin objects that exist for passed query filters
	Count int32 `json:"count"`
	// An array of PinStatus results
	Results []PinStatus `json:"results"`
}

// NewPinResults instantiates a new PinResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinResults(count int32, results []PinStatus) *PinResults {
	this := PinResults{}
	this.Count = count
	this.Results = results
	return &this
}

// NewPinResultsWithDefaults instantiates a new PinResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinResultsWithDefaults() *PinResults {
	this := PinResults{}
	return &this
}

// GetCount returns the Count field value
func (o *PinResults) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *PinResults) GetCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *PinResults) SetCount(v int32) {
	o.Count = v
}

// GetResults returns the Results field value
func (o *PinResults) GetResults() []PinStatus {
	if o == nil {
		var ret []PinStatus
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *PinResults) GetResultsOk() ([]PinStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *PinResults) SetResults(v []PinStatus) {
	o.Results = v
}

func (o PinResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["count"] = o.Count
	}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullablePinResults struct {
	value *PinResults
	isSet bool
}

func (v NullablePinResults) Get() *PinResults {
	return v.value
}

func (v *NullablePinResults) Set(val *PinResults) {
	v.value = val
	v.isSet = true
}

func (v NullablePinResults) IsSet() bool {
	return v.isSet
}

func (v *NullablePinResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinResults(val *PinResults) *NullablePinResults {
	return &NullablePinResults{value: val, isSet: true}
}

func (v NullablePinResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


