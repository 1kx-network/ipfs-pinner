/*
IPFS Pinning Service API

some notes

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PinataOptions struct for PinataOptions
type PinataOptions struct {
	// CID version IPFS will use when creating a hash for your content
	CidVersion *string `json:"cidVersion,omitempty"`
	// Wrap your content inside of a directory when adding to IPFS.
	WrapWithDirectory *bool `json:"wrapWithDirectory,omitempty"`
}

// NewPinataOptions instantiates a new PinataOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinataOptions() *PinataOptions {
	this := PinataOptions{}
	return &this
}

// NewPinataOptionsWithDefaults instantiates a new PinataOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinataOptionsWithDefaults() *PinataOptions {
	this := PinataOptions{}
	return &this
}

// GetCidVersion returns the CidVersion field value if set, zero value otherwise.
func (o *PinataOptions) GetCidVersion() string {
	if o == nil || o.CidVersion == nil {
		var ret string
		return ret
	}
	return *o.CidVersion
}

// GetCidVersionOk returns a tuple with the CidVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinataOptions) GetCidVersionOk() (*string, bool) {
	if o == nil || o.CidVersion == nil {
		return nil, false
	}
	return o.CidVersion, true
}

// HasCidVersion returns a boolean if a field has been set.
func (o *PinataOptions) HasCidVersion() bool {
	if o != nil && o.CidVersion != nil {
		return true
	}

	return false
}

// SetCidVersion gets a reference to the given string and assigns it to the CidVersion field.
func (o *PinataOptions) SetCidVersion(v string) {
	o.CidVersion = &v
}

// GetWrapWithDirectory returns the WrapWithDirectory field value if set, zero value otherwise.
func (o *PinataOptions) GetWrapWithDirectory() bool {
	if o == nil || o.WrapWithDirectory == nil {
		var ret bool
		return ret
	}
	return *o.WrapWithDirectory
}

// GetWrapWithDirectoryOk returns a tuple with the WrapWithDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinataOptions) GetWrapWithDirectoryOk() (*bool, bool) {
	if o == nil || o.WrapWithDirectory == nil {
		return nil, false
	}
	return o.WrapWithDirectory, true
}

// HasWrapWithDirectory returns a boolean if a field has been set.
func (o *PinataOptions) HasWrapWithDirectory() bool {
	if o != nil && o.WrapWithDirectory != nil {
		return true
	}

	return false
}

// SetWrapWithDirectory gets a reference to the given bool and assigns it to the WrapWithDirectory field.
func (o *PinataOptions) SetWrapWithDirectory(v bool) {
	o.WrapWithDirectory = &v
}

func (o PinataOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CidVersion != nil {
		toSerialize["cidVersion"] = o.CidVersion
	}
	if o.WrapWithDirectory != nil {
		toSerialize["wrapWithDirectory"] = o.WrapWithDirectory
	}
	return json.Marshal(toSerialize)
}

type NullablePinataOptions struct {
	value *PinataOptions
	isSet bool
}

func (v NullablePinataOptions) Get() *PinataOptions {
	return v.value
}

func (v *NullablePinataOptions) Set(val *PinataOptions) {
	v.value = val
	v.isSet = true
}

func (v NullablePinataOptions) IsSet() bool {
	return v.isSet
}

func (v *NullablePinataOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinataOptions(val *PinataOptions) *NullablePinataOptions {
	return &NullablePinataOptions{value: val, isSet: true}
}

func (v NullablePinataOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinataOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
